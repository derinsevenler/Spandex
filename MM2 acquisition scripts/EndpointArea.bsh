
import ij.gui.*; 
import ij.IJ;
import ij.Menus;
import ij.io.*;
import ij.plugin.*;
import ij.*;

// import ij.ImagePlus;
// import ij.ImageStack;
// import ij.ImageProcessor;
import ij.measure.ResultsTable;

// log = mm.getLogManager();
initExp = mmc.getExposure();

// ---------------------------------------------------------------------------------
// GET SETTINGS FROM USER
// ---------------------------------------------------------------------------------
 
directoryC = new DirectoryChooser("Choose the save directory:");
directoryC.setDefaultDirectory("D:\\User_Scratch");
saveDir = directoryC.getDirectory();


String[] objectiveArray = new String[4]; 
objectiveArray[0]="10x   "; 
objectiveArray[1]="20x   "; 
objectiveArray[2]="40x   "; 
objectiveArray[3]="50x   ";
String[] mediaArray = new String[2]; 
mediaArray[0]="dry   "; 
mediaArray[1]="wet   "; 
String[] npArray = new String[2]; 
npArray[0]="bio-nps   "; 
npArray[1]="nanorod   ";

GenericDialog gd = new GenericDialog("Endpoint Whole Area Particle Counting");

gd.addStringField("Save Directory:",saveDir, 30);
gd.addStringField("Chip Name","chip" ,15); 
gd.addMessage("");
gd.addNumericField("field size X (mm)", 1.5,1);
gd.addNumericField("field size Y (mm)", 1.5,1);
gd.addMessage("");
gd.addNumericField("Exposure time",initExp, 2);
gd.addMessage("");

// ???
curObj = mmc.getConfigGroupState("Objective").getSetting("DObjective","Label").getPropertyValue();
gd.addRadioButtonGroup("Select the Objective",objectiveArray,1,4, curObj + "   "); 
gd.addMessage("");
gd.addRadioButtonGroup("Select media",mediaArray,1,2,"wet   "); 
gd.addMessage("");
gd.addRadioButtonGroup("Nanoparticle",npArray,1,3,"nanorod   "); 


gd.showDialog(); 
if (gd.wasCanceled()) 
return false; 

// Get Inputs
saveDir = gd.getNextString();
saveFname = gd.getNextString();
fieldSizeXmm = gd.getNextNumber();
fieldSizeYmm = gd.getNextNumber();
exposureTime = gd.getNextNumber();
objLongName = gd.getNextRadioButton();
immersionMedia = gd.getNextRadioButton(); 
nanoparticle = gd.getNextRadioButton(); 



// ---------------------------------------------------------------------------------
// CONFIGURATION & SETUP
// ---------------------------------------------------------------------------------

// Figure out the correct polarizer settings
// For viruses, do not use polarization
linPol1 = 0;
// These must be initialized outside the conditional for proper scope
qwp1 = 0; qwp2 = 0; linPol2 = 0;
if (nanoparticle.equals("bio-nps   ")){ 
	// turn polarization off
	qwp1 = 354;
	qwp2 = 351;
	linPol2 = 0;
} else { // we are looking at nanorods
	qwp1 = 38;
	qwp2 = 40;
	linPol2 = 80;
}
GenericDialog gd2 = new GenericDialog("Endpoint Whole Area Particle Counting");
gd2.addMessage("Move and focus at the top-left corner of scan region.");
gd2.addMessage("Set the polarization optics: " + linPol1 + " (Left-most), " + qwp1 + " (second on left), " + qwp2 + " (lower on right), " +  linPol2 + " (upper on right).");
gd2.showDialog();
if (gd2.wasCanceled())
	return false;

combiner = new StackCombiner();
ic = new ImageCalculator();

dark_image = "D:/User_Scratch/Derin/easyIRIS/mirror files/darkImg_easyIRIS.tif";

// Set the z-stack properties depending on the objective
// Note that properties scale roughly with the NA, not the magnification
// Note that the media is not considered here BUT IT SHOULD BE
// THESE ARE PLACEHOLDERS
zStackWidthUm = 0;zStepUm = 0.0;objNA = 0.0;objMag = 0;
switch (objLongName.substring(0,3)) {
	case "10x":
		zStackWidthUm = 24;
		zStepUm = .8;
		objNA = 0.3;
		objMag = 10;
		break;
	case "20x":
		zStackWidthUm = 16;
		zStepUm = .5;
		objNA = 0.45;
		objMag = 20;
		break;
	case "40x":
		zStackWidthUm = 8;
		zStepUm = .2;
		objNA = 0.9;
		objMag = 40;
		break;
	case "50x":
		zStackWidthUm = 8;
		zStepUm = .2;
		objNA = 0.8;
		objMag = 50;
		break;
}
nZPos = zStackWidthUm/zStepUm;



// Set microscope configuration and get image scale factors
mm.setExposure(exposureTime);
mmc.setConfig("Objective",objLongName.substring(0,3));
imWidth = mmc.getImageWidth();
imHeight = mmc.getImageHeight();
pixelSizeUm = mmc.getPixelSizeUm();
fieldOfViewXmm = imWidth*pixelSizeUm/1000.0;
fieldOfViewYmm = imHeight*pixelSizeUm/1000.0;
nPosX = Math.ceil(fieldSizeXmm / fieldOfViewXmm);
nPosY = Math.ceil(fieldSizeYmm / fieldOfViewYmm);
bitDepth = mmc.getImageBitDepth();


// Set up the kernel for spatial filtering
// https://www.osapublishing.org/DirectPDFAccess/CBFDD7A6-CFCA-4615-F9FDFC8F5F00205C_207144/oe-18-24-24461.pdf
// THIS COEFFICIENT IS A PLACEHOLDER
illumLambdaNm = 660.0; // in nanometers
kernelSigma = 0.25*objNA/(illumLambdaNm/1000*pixelSizeUm); // kernel sigma is in units of *pixels*
kernelSigma = Math.round(kernelSigma*100.0)/100.0;

// THIS COEFFICIENT IS ALSO A PLACEHOLDER
particleBrightnessThreshold = 1500;

mm.live().setLiveMode(false);
mm.acquisitions().clearRunnables();

// Set the detection threshold and configure the frame averaging pipeline based on the particles
mm.data().clearPipeline();
// rods flicker in liquid so we do not average frames for them.
// For all other cases we need to set up the pipeline.
// if (!(nanoparticle.equals("nanorod   ") && immersionMedia.equals("wet   "))){
// 	// DOING ALL OF THIS WAS REALLY DIFFICULT
// 	// https://github.com/micro-manager/micro-manager/blob/mm2/plugins/FrameCombiner/src/main/java/org/micromanager/plugins/framecombiner/FrameCombinerConfigurator.java
	
// 	// THIS VALUE IS A PLACEHOLDER
// 	nAvgFrames = 8;

// 	processors = mm.plugins().getProcessorPlugins();
// 	frameCombiner = processors.get("org.micromanager.plugins.framecombiner.FrameCombinerPlugin");
// 	frameCombinerSettings = mm.data().getPropertyMapBuilder();
// 	frameCombinerSettings.putString("processorDimension","Time");
// 	frameCombinerSettings.putString("processorAlgo","Mean");
// 	frameCombinerSettings.putInt("numerOfImagesToProcess",nAvgFrames); // <-- typo 'numer' not 'number' in API
// 	frameCombinerSettings.putString("channelsToAvoidField","");
// 	frameCombinerConfig = frameCombiner.createConfigurator(frameCombinerSettings.build());
// 	mm.data().addConfiguredProcessor(frameCombinerConfig, frameCombiner);
// }

// prepare particle position list
f = new File(saveDir + saveFname + "_particleXY.txt");
if (!f.exists()){
	f.createNewFile();
}
FileOutputStream fos = new FileOutputStream(f);
BufferedWriter particleXYBuffer = new BufferedWriter(new OutputStreamWriter(fos));


// ---------------------------------------------------------------------------------
// FOCUSING
// ---------------------------------------------------------------------------------

IJ.log("Focusing in the four corners:");
startXY = mmc.getXYStagePosition();
startX = startXY.getX();
startY = startXY.getY();

// Set up autofocus based on the objective we are using
afMgmt = mm.getAutofocusManager();
afMgmt.setAutofocusMethodByName("JAF(TB)");
af = afMgmt.getAutofocusMethod();
af.setPropertyValue("1st step size", "" +(zStepUm*10));
af.setPropertyValue("1st setp number", "" + 10); // note typo in API
af.setPropertyValue("2nd step size", "" + (zStepUm*2));
af.setPropertyValue("2nd step size", "" + 10);
af.setPropertyValue("Threshold", "" + .5);
af.setPropertyValue("Crop ratio", "" + 1);


IJ.log("top left...");
// af.fullFocus();
topLeftZ = mmc.getPosition(); // we should already be in focus here.
IJ.log("Top Right:");
mmc.setXYPosition(startX-1000.0*fieldSizeXmm, startY);
// af.fullFocus();
topRightZ = mmc.getPosition();
IJ.log("Bottom Left:");
mmc.setXYPosition(startX, startY-1000.0*fieldSizeYmm);
// af.fullFocus();
botLeftZ = mmc.getPosition(); // we should already be in focus here.
IJ.log("Bottom Right:");
mmc.setXYPosition(startX-1000.0*fieldSizeXmm, startY-1000.0*fieldSizeYmm);
// af.fullFocus();
botRightZ = mmc.getPosition();


// ---------------------------------------------------------------------------------
// SCANNING
// ---------------------------------------------------------------------------------

IJ.log("Scanning the region for nanoparticles...");
ImagePlus finalImp;
ImagePlus thisSlice; // declaration is required for correct scope
for (int idx=0; idx<nPosX; idx++){
	// Coordinate information for dead-reckoning X,Y,Z
	thisX = startX - idx*fieldOfViewXmm*1000;
	colStartZ = topLeftZ + ((idx*fieldOfViewXmm)/fieldSizeXmm)*(topRightZ-topLeftZ);
	colEndZ = botLeftZ + ((idx*fieldOfViewXmm)/fieldSizeXmm)*(botRightZ-botLeftZ);

	for (int idy=0; idy<nPosY; idy++){
		// Coordinate information for dead-reckoning X,Y,Z
		thisY = startY - idy*fieldOfViewYmm*1000;
		thisZ = colStartZ + ((idy*fieldOfViewYmm)/fieldSizeYmm)*(colStartZ-colEndZ);
		// Move in X,Y,Z
		mmc.setXYPosition(thisX, thisY);
		mmc.setPosition(thisZ);
		mmc.sleep(1000);
		

		// Create Preview -------------------------------------------
		mmc.waitForSystem();
		image = mm.live().snap(false).get(0);
		ip = mm.data().ij().createProcessor(image).bin(5);
		imp = new ImagePlus(saveDir, ip);
		IJ.run(imp,"Fast Filters", "link filter=median x=15 y=15 preprocessing=none subtract offset=256");
		IJ.run(imp,"8-bit");
		// imp.show();
		// Add this to the preview slice
		if (idy == 0) {
			thisSlice = imp.duplicate();
		} else {
			combinedStack = combiner.combineVertically(thisSlice.getStack(), imp.getStack());
			thisSlice = new ImagePlus("slice", combinedStack);
		}

		// Take Z-stack -------------------------------------------
		zStart = thisZ-zStackWidthUm/2;
		ImageStack thisZStack = new ImageStack((int)imWidth, (int)imHeight, (int)nZPos);
		for (int zidx=0; zidx< nZPos; zidx++) {
			mmc.setPosition(zStart+zidx*zStepUm);
			mmc.waitForSystem();
			image = mm.live().snap(false).get(0);
			thisZStack.setPixels(image.getRawPixels(), zidx+1);
		}
		mmc.setPosition(thisZ); // move back to the middle position

		// Perform Particle detection -------------------------------------------
		ImagePlus stackPlus = new ImagePlus("current Z stack", thisZStack);
		// stackPlus.show();
		IJ.run(stackPlus,"Spandex Stack", "sigma=" + kernelSigma + " particle=" + particleBrightnessThreshold + " bare=" + 1.3);

		// Save Particle Positions -------------------------------------------
		IJ.renameResults("Particle Results","Results");
		resultsTable = ResultsTable.getResultsTable();
		xCol =  resultsTable.getColumnIndex("x");
		yCol =  resultsTable.getColumnIndex("y");
		xPos = resultsTable.getColumnAsDoubles(xCol);
		yPos = resultsTable.getColumnAsDoubles(yCol);
		for (k=0; k<xPos.length; k+=1){
			particleXYBuffer.write( IJ.d2s(xPos[k]*pixelSizeUm-(thisX-startX),3) + ", " + IJ.d2s(-yPos[k]*pixelSizeUm+(thisY-startY),3));
			particleXYBuffer.newLine();
		}
		IJ.selectWindow("Results");
		IJ.run("Close");
		IJ.log( Math.round( (idx*nPosY+idy+1)*100/(nPosX*nPosY) ) + "% complete... ");
	}

	// Add the preview 'slice' to the 'final preview'
	if ( idx == 0){
		finalImp = thisSlice;
	} else {
		newSlice = thisSlice;
		combinedSlices = combiner.combineHorizontally(finalImp.getStack(), thisSlice.getStack());
		// finalImp.close();
		// thisSlice.close();
		finalImp = new ImagePlus(saveFname + "_composite_image", combinedSlices);
	}
}
// ---------------------------------------------------------------------------------
// SAVE RESULTS 
// ---------------------------------------------------------------------------------

particleXYBuffer.close();
fos.close();
System.gc();
mmc.setXYPosition(startX, startY);
mmc.waitForSystem();
finalImp.show();

FileSaver fs = new FileSaver(finalImp);
fs.saveAsTiff(saveDir + saveFname + "_preview_image.tif");
		
IJ.log("Scan complete.\nPreview image saved as \n" + saveDir + saveFname + "_preview_image.tif \nParticle positions saved in \n" + saveDir + saveFname + "_particleXY.txt");








// Backup approach if frameCombiner doesn't work ---------------------------------------------------------
// /**
//  * Example of running sequence acquisitions (a.k.a. burst acquisitions).
//  */

// nrFrames = 500;
// exposureMs = mmc.getExposure();
// // Create a Datastore for the images to be stored in, in RAM.
// store = mm.data().createRAMDatastore();
// // Create a display to show images as they are acquired.
// mm.displays().createDisplay(store);

// // Start collecting images.
// // Arguments are the number of images to collect, the amount of time to wait
// // between images, and whether or not to halt the acquisition if the
// // sequence buffer overflows.
// mmc.startSequenceAcquisition(nrFrames, 0, true);
// // Set up a Coords.CoordsBuilder for applying coordinates to each image.
// builder = mm.data().getCoordsBuilder().z(0).channel(0).stagePosition(0);
// int curFrame = 0;
// while (mmc.getRemainingImageCount() > 0 || mmc.isSequenceRunning(mmc.getCameraDevice())) {
//    if (mmc.getRemainingImageCount() > 0) {
//       tagged = mmc.popNextTaggedImage();
//       // Convert to an Image at the desired timepoint.
//       image = mm.data().convertTaggedImage(tagged,
//          builder.time(curFrame).build(), null);
//       store.putImage(image);
//       curFrame++;
//    }
//    else {
//       // Wait for another image to arrive.
//       mmc.sleep(Math.min(.5 * exposureMs, 20));
//    }
// }

// mmc.stopSequenceAcquisition();
// // Have Micro-Manager handle logic for ensuring data is saved to disk.
// mm.displays().manage(store);